#!/bin/bash

# Colors for output
RED='\x1b[0;31m'
GREEN='\x1b[0;32m'
YELLOW='\x1b[0;33m'
BLUE='\x1b[0;34m'
NC='\x1b[0m' # No Color

# Repository URL
REPO_URL="{{repoUrl}}"
REPO_NAME="{{repoName}}"

# Print banner
echo -e "${BLUE}"
echo "╔════════════════════════════════════════════════════════════╗"
echo "║                                                            ║"
if [ "$CONTRACT_TYPE" = "rum" ]; then
  echo "║         XION RUM Mobile App Installer                      ║"
elif [ "{{template}}" = "mobile" ]; then
  echo "║             XION Mobile App Installer                      ║"
else
  echo "║             XION User Map Web App Installer                ║"
fi
echo "║                                                            ║"
echo "╚════════════════════════════════════════════════════════════╝"
echo -e "${NC}"

# Set the server URL - this will be replaced with the actual URL when the script is served
SERVER_URL="{{serverUrl}}"

# Set user address from URL parameter if provided
USER_ADDRESS="{{userAddress}}"

# Contract type configuration
CONTRACT_TYPE="{{contractType}}"
RUM_INDEX="{{rumIndex}}"


# Ask for user address if not provided
if [ -z "$USER_ADDRESS" ]; then
  echo -e "${BLUE}To populate environment variables with contract addresses, please enter your wallet address (optional):${NC}"
  read -p "Wallet address (press Enter to skip): " USER_ADDRESS
fi

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Check for dependencies
echo -e "${BLUE}Checking dependencies...${NC}"

# Check for git
if command_exists git; then
  echo -e "${GREEN}✓ Git is installed${NC}"
else
  echo -e "${RED}✗ Git is not installed${NC}"
  echo -e "${YELLOW}Please install Git: https://git-scm.com/downloads${NC}"
  exit 1
fi

# Check for Node.js
if command_exists node; then
  NODE_VERSION=$(node -v | cut -d 'v' -f 2)
  NODE_MAJOR_VERSION=$(echo $NODE_VERSION | cut -d '.' -f 1)
  if [ "$NODE_MAJOR_VERSION" -ge 18 ]; then
    echo -e "${GREEN}✓ Node.js v$NODE_VERSION is installed${NC}"
  else
    echo -e "${RED}✗ Node.js v$NODE_VERSION is installed, but v18+ is required${NC}"
    echo -e "${YELLOW}Please upgrade Node.js: https://nodejs.org/${NC}"
    exit 1
  fi
else
  echo -e "${RED}✗ Node.js is not installed${NC}"
  echo -e "${YELLOW}Please install Node.js v18+: https://nodejs.org/${NC}"
  exit 1
fi

# Check for npm
if command_exists npm; then
  NPM_VERSION=$(npm --version)
  echo -e "${GREEN}✓ npm v$NPM_VERSION is installed${NC}"
else
  echo -e "${RED}✗ npm is not installed${NC}"
  echo -e "${YELLOW}Please install npm (comes with Node.js): https://nodejs.org/${NC}"
  exit 1
fi

# Clone the repository
echo -e "\n${BLUE}Cloning the repository...${NC}"
if [ -d "$REPO_NAME" ]; then
  echo -e "${YELLOW}Directory $REPO_NAME already exists.${NC}"
  read -p "Do you want to remove it and clone again? (y/n): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf "$REPO_NAME"
  else
    echo -e "${YELLOW}Using existing directory.${NC}"
    cd "$REPO_NAME"
    # Pull latest changes
    git pull
    cd ..
  fi
fi

if [ ! -d "$REPO_NAME" ]; then
  git clone "$REPO_URL" "$REPO_NAME"
  if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to clone the repository.${NC}"
    exit 1
  fi
fi

# Navigate to the repository
cd "$REPO_NAME"

# For RUM contracts, checkout the impl-reclaim branch
if [ "$CONTRACT_TYPE" = "rum" ]; then
  echo -e "\n${BLUE}Checking out impl-reclaim branch for RUM support...${NC}"
  git checkout impl-reclaim
  if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to checkout impl-reclaim branch.${NC}"
    echo -e "${YELLOW}This branch is required for RUM contract functionality.${NC}"
    exit 1
  fi
  echo -e "${GREEN}✓ Successfully switched to impl-reclaim branch${NC}"
fi

# Create .env.local file
echo -e "\n${BLUE}Creating .env.local file...${NC}"

# Get user address from the wallet
if command_exists curl; then
  
  # Try to fetch environment values from the server
  ENV_URL="${SERVER_URL}/env/?template={{template}}&verify=false"

  if [ -n "$USER_ADDRESS" ]; then
    ENV_URL="${ENV_URL}&user_address=${USER_ADDRESS}"
  fi
  
  if [ -n "$CONTRACT_TYPE" ]; then
    ENV_URL="${ENV_URL}&contract_type=${CONTRACT_TYPE}"
  fi
  
  if [ -n "$RUM_INDEX" ] && [ "$RUM_INDEX" != "undefined" ]; then
    ENV_URL="${ENV_URL}&rum_index=${RUM_INDEX}"
  fi

  ENV_CONTENT=$(curl -fsSL "${ENV_URL}" 2>/dev/null)

  if [ $? -eq 0 ] && [ -n "$ENV_CONTENT" ]; then
    echo -e "${GREEN}✓ Successfully fetched environment values${NC}"
    echo "${ENV_CONTENT}" > .env.local
  else
    echo -e "${RED}✗ Failed to fetch environment variables from the server${NC}"
    echo -e "${RED}Please ensure you have a valid wallet address and try again${NC}"
    exit 1
  fi
else
  echo -e "${RED}✗ curl is not installed${NC}"
  echo -e "${RED}curl is required to fetch environment variables from the server${NC}"
  echo -e "${YELLOW}Please install curl and try again${NC}"
  exit 1
fi

echo -e "${GREEN}✓ Created .env.local file${NC}"

# Install dependencies
echo -e "\n${BLUE}Installing dependencies...${NC}"
npm install
if [ $? -ne 0 ]; then
  echo -e "${RED}Failed to install dependencies.${NC}"
  exit 1
fi

echo -e "${GREEN}✓ Dependencies installed successfully${NC}"

# For RUM contracts, prompt for Reclaim credentials
if [ "$CONTRACT_TYPE" = "rum" ]; then
  echo -e "\n${BLUE}════════════════════════════════════════════════════════════${NC}"
  echo -e "${BLUE}           Reclaim Protocol Configuration Required           ${NC}"
  echo -e "${BLUE}════════════════════════════════════════════════════════════${NC}"
  
  echo -e "\n${YELLOW}To use zkTLS proofs with your RUM contract, you need Reclaim credentials.${NC}"
  echo -e "${BLUE}If you don't have them yet:${NC}"
  echo -e "  1. Create an account at ${GREEN}https://dev.reclaimprotocol.org${NC}"
  echo -e "  2. Create a new application"
  echo -e "  3. Add a 'Twitter User Profile' provider"
  echo -e "  4. Copy your credentials\n"
  
  echo -e "${BLUE}Would you like to configure your Reclaim credentials now? (y/n):${NC}"
  read -p "" -n 1 -r
  echo
  
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Keep trying until we get all credentials or user gives up
    while true; do
      # Prompt for App ID
      echo -e "\n${BLUE}Enter your Reclaim App ID:${NC}"
      read -p "App ID: " RECLAIM_APP_ID
      
      # Prompt for App Secret
      echo -e "\n${BLUE}Enter your Reclaim App Secret:${NC}"
      echo -e "${YELLOW}(This will be hidden as you type for security)${NC}"
      read -s -p "App Secret: " RECLAIM_APP_SECRET
      echo
      
      # Prompt for Provider ID
      echo -e "\n${BLUE}Enter your Reclaim Provider ID:${NC}"
      read -p "Provider ID: " RECLAIM_PROVIDER_ID
      
      # Trim whitespace from all credentials
      RECLAIM_APP_ID=$(echo "$RECLAIM_APP_ID" | xargs)
      RECLAIM_APP_SECRET=$(echo "$RECLAIM_APP_SECRET" | xargs)
      RECLAIM_PROVIDER_ID=$(echo "$RECLAIM_PROVIDER_ID" | xargs)
      
      # Check if all credentials are provided
      if [ -n "$RECLAIM_APP_ID" ] && [ -n "$RECLAIM_PROVIDER_ID" ] && [ -n "$RECLAIM_APP_SECRET" ]; then
        echo -e "\n${BLUE}Updating .env.local with your credentials...${NC}"
        
        # Update App ID
        sed -i.bak "s/EXPO_PUBLIC_RECLAIM_APP_ID=\"your-reclaim-app-id\"/EXPO_PUBLIC_RECLAIM_APP_ID=\"$RECLAIM_APP_ID\"/" .env.local
        
        # Update Provider ID
        sed -i.bak "s/EXPO_PUBLIC_RECLAIM_PROVIDER_ID=\"your-reclaim-provider-id\"/EXPO_PUBLIC_RECLAIM_PROVIDER_ID=\"$RECLAIM_PROVIDER_ID\"/" .env.local
        
        # Update App Secret
        sed -i.bak "s/EXPO_PUBLIC_RECLAIM_APP_SECRET=\"your-reclaim-app-secret\"/EXPO_PUBLIC_RECLAIM_APP_SECRET=\"$RECLAIM_APP_SECRET\"/" .env.local
        
        # Clean up backup files
        rm -f .env.local.bak
        
        echo -e "${GREEN}✓ Reclaim credentials have been configured successfully!${NC}"
        echo -e "${YELLOW}Remember: Never commit your .env.local file to version control!${NC}"
        break
      else
        # Show which credentials are missing
        echo -e "\n${RED}Missing credentials:${NC}"
        [ -z "$RECLAIM_APP_ID" ] && echo -e "  - App ID"
        [ -z "$RECLAIM_APP_SECRET" ] && echo -e "  - App Secret"
        [ -z "$RECLAIM_PROVIDER_ID" ] && echo -e "  - Provider ID"
        
        echo -e "\n${YELLOW}All three credentials are required for RUM to work properly.${NC}"
        echo -e "${BLUE}Would you like to try again? (y/n):${NC}"
        read -p "" -n 1 -r RETRY_REPLY
        echo
        
        if [[ ! $RETRY_REPLY =~ ^[Yy]$ ]]; then
          echo -e "\n${YELLOW}You can configure your Reclaim credentials later by editing .env.local${NC}"
          break
        fi
      fi
    done
  else
    echo -e "\n${YELLOW}You can configure your Reclaim credentials later by editing .env.local${NC}"
    echo -e "${BLUE}Look for these variables:${NC}"
    echo -e "  • EXPO_PUBLIC_RECLAIM_APP_ID"
    echo -e "  • EXPO_PUBLIC_RECLAIM_PROVIDER_ID"
    echo -e "  • EXPO_PUBLIC_RECLAIM_APP_SECRET"
  fi
fi

# Success message
echo -e "\n${GREEN}✅ Setup completed successfully!${NC}"

if [ "{{template}}" = "mobile" ]; then
  echo -e "${BLUE}Available commands for the mobile app:${NC}"
  echo -e "  cd $REPO_NAME"
  echo -e "  npm run start     # Start the Expo development server"
  echo -e "  npm run android   # Run on Android"
  echo -e "  npm run ios       # Run on iOS"
  echo -e "  npm run web       # Run on web browser"
  echo -e "  npm run test      # Run tests"
  echo -e "  npm run lint      # Run linter"
else
  echo -e "${BLUE}To start the development server:${NC}"
  echo -e "  cd $REPO_NAME"
  echo -e "  npm run dev"
  echo -e "\n${BLUE}To build the project:${NC}"
  echo -e "  cd $REPO_NAME"
  echo -e "  npm run build"
fi

# Note about contract addresses
echo -e "\n${BLUE}Note: Your .env.local file has been populated with contract addresses.${NC}"
echo -e "${BLUE}If you need to use different contract addresses, you can edit the .env.local file.${NC}"
